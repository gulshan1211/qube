const BASE_URL = 'http://192.168.1.12:5000';

/**
 * Verify the stored secret and load the main page or show the login page.
 * 
 * @param secret - The authentication token for the API request.
 * @param webviewView - The webview view instance.
 * @param extensionUri - The extension URI.
 * @param secretStorage - The secret storage instance.
 */
export async function checkAuth(secret: string, webviewView: vscode.WebviewView, extensionUri: vscode.Uri, secretStorage: vscode.SecretStorage) {
    const url = new URL('/api/testing', BASE_URL).toString();

    const options: RequestInit = {
        method: 'GET',
        headers: {
            'Authorization': `Bearer ${secret}`
        }
    };

    try {
        const response = await fetchWithTimeout(url, options, 60000); // 6 seconds timeout
        if (response.ok) {
            vscode.window.showInformationMessage('Authentication successful!');
            webviewView.webview.html = getMainPageHtml(webviewView.webview, extensionUri);
            webviewView.webview.postMessage({ type: 'sendMessageToUI', value: secret });
        } else {
            vscode.window.showErrorMessage('Authentication failed! Clearing data...');
            await clearStoredSecret(secretStorage);
            webviewView.webview.html = getLoginPageHtml(webviewView.webview, extensionUri);
        }
    } catch (error: unknown) {
        vscode.window.showErrorMessage(`Problem with request: ${getErrorMessage(error)}`);
        webviewView.webview.html = getLoginPageHtml(webviewView.webview, extensionUri);
    }
}

/**
 * Fetches a URL with a timeout.
 * 
 * @param url - The URL to fetch.
 * @param options - The request options.
 * @param timeout - The timeout duration in milliseconds.
 * @returns The fetch response.
 */
async function fetchWithTimeout(url: string, options: RequestInit, timeout: number = 30000): Promise<Response> {
    return new Promise((resolve, reject) => {
        const timer = setTimeout(() => {
            reject(new Error('Request timed out'));
        }, timeout);

        fetch(url, options).then(
            response => {
                clearTimeout(timer);
                resolve(response);
            },
            err => {
                clearTimeout(timer);
                reject(err);
            }
        );
    });
}
